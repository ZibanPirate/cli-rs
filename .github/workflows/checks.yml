name: Checks

on:
  push:
    branches:
      - "**"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-rust-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        run: cargo build

  fmt:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-rust-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt --all -- --check

  clippy:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-rust-${{ hashFiles('**/Cargo.lock') }}

      - name: Run clippy
        run: cargo clippy -- -D warnings

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - uses: cargo-bins/cargo-binstall@main

      - name: Install tarpaulin
        run: cargo binstall cargo-tarpaulin

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-rust-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cargo tarpaulin --out Lcov --output-dir=./coverage/${{ matrix.os }} --exclude-files="*/tests/*"

      - name: Save coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.os }}
          path: ./coverage

  prettier:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Check prettier formatting
        run: |
          npx -y prettier --check .

  sonarqube:
    name: SonarQube
    needs: [build, fmt, clippy, test, prettier]
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Restore coverage report
        uses: actions/download-artifact@v4
        with:
          path: ./coverage

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
